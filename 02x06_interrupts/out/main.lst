
out/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4a3c      	ldr	r2, [pc, #240]	; (8000284 <GPIO_DeInit+0xfc>)
 8000194:	4293      	cmp	r3, r2
 8000196:	d108      	bne.n	80001aa <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000198:	2001      	movs	r0, #1
 800019a:	2101      	movs	r1, #1
 800019c:	f000 fe98 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80001a0:	2001      	movs	r0, #1
 80001a2:	2100      	movs	r1, #0
 80001a4:	f000 fe94 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
 80001a8:	e068      	b.n	800027c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4a36      	ldr	r2, [pc, #216]	; (8000288 <GPIO_DeInit+0x100>)
 80001ae:	4293      	cmp	r3, r2
 80001b0:	d108      	bne.n	80001c4 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80001b2:	2002      	movs	r0, #2
 80001b4:	2101      	movs	r1, #1
 80001b6:	f000 fe8b 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80001ba:	2002      	movs	r0, #2
 80001bc:	2100      	movs	r1, #0
 80001be:	f000 fe87 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
 80001c2:	e05b      	b.n	800027c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4a31      	ldr	r2, [pc, #196]	; (800028c <GPIO_DeInit+0x104>)
 80001c8:	4293      	cmp	r3, r2
 80001ca:	d108      	bne.n	80001de <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80001cc:	2004      	movs	r0, #4
 80001ce:	2101      	movs	r1, #1
 80001d0:	f000 fe7e 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80001d4:	2004      	movs	r0, #4
 80001d6:	2100      	movs	r1, #0
 80001d8:	f000 fe7a 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
 80001dc:	e04e      	b.n	800027c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4a2b      	ldr	r2, [pc, #172]	; (8000290 <GPIO_DeInit+0x108>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d108      	bne.n	80001f8 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80001e6:	2008      	movs	r0, #8
 80001e8:	2101      	movs	r1, #1
 80001ea:	f000 fe71 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80001ee:	2008      	movs	r0, #8
 80001f0:	2100      	movs	r1, #0
 80001f2:	f000 fe6d 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
 80001f6:	e041      	b.n	800027c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4a26      	ldr	r2, [pc, #152]	; (8000294 <GPIO_DeInit+0x10c>)
 80001fc:	4293      	cmp	r3, r2
 80001fe:	d108      	bne.n	8000212 <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000200:	2010      	movs	r0, #16
 8000202:	2101      	movs	r1, #1
 8000204:	f000 fe64 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000208:	2010      	movs	r0, #16
 800020a:	2100      	movs	r1, #0
 800020c:	f000 fe60 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
 8000210:	e034      	b.n	800027c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a20      	ldr	r2, [pc, #128]	; (8000298 <GPIO_DeInit+0x110>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d108      	bne.n	800022c <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800021a:	2020      	movs	r0, #32
 800021c:	2101      	movs	r1, #1
 800021e:	f000 fe57 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000222:	2020      	movs	r0, #32
 8000224:	2100      	movs	r1, #0
 8000226:	f000 fe53 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
 800022a:	e027      	b.n	800027c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOG)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a1b      	ldr	r2, [pc, #108]	; (800029c <GPIO_DeInit+0x114>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d108      	bne.n	8000246 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000234:	2040      	movs	r0, #64	; 0x40
 8000236:	2101      	movs	r1, #1
 8000238:	f000 fe4a 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800023c:	2040      	movs	r0, #64	; 0x40
 800023e:	2100      	movs	r1, #0
 8000240:	f000 fe46 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
 8000244:	e01a      	b.n	800027c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOH)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <GPIO_DeInit+0x118>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d108      	bne.n	8000260 <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800024e:	2080      	movs	r0, #128	; 0x80
 8000250:	2101      	movs	r1, #1
 8000252:	f000 fe3d 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000256:	2080      	movs	r0, #128	; 0x80
 8000258:	2100      	movs	r1, #0
 800025a:	f000 fe39 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
 800025e:	e00d      	b.n	800027c <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOI)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <GPIO_DeInit+0x11c>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d109      	bne.n	800027c <GPIO_DeInit+0xf4>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000268:	f44f 7080 	mov.w	r0, #256	; 0x100
 800026c:	2101      	movs	r1, #1
 800026e:	f000 fe2f 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000272:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000276:	2100      	movs	r1, #0
 8000278:	f000 fe2a 	bl	8000ed0 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40020000 	.word	0x40020000
 8000288:	40020400 	.word	0x40020400
 800028c:	40020800 	.word	0x40020800
 8000290:	40020c00 	.word	0x40020c00
 8000294:	40021000 	.word	0x40021000
 8000298:	40021400 	.word	0x40021400
 800029c:	40021800 	.word	0x40021800
 80002a0:	40021c00 	.word	0x40021c00
 80002a4:	40022000 	.word	0x40022000

080002a8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b087      	sub	sp, #28
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e076      	b.n	80003b2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	2201      	movs	r2, #1
 80002c8:	fa02 f303 	lsl.w	r3, r2, r3
 80002cc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	4013      	ands	r3, r2
 80002d6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d165      	bne.n	80003ac <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	4619      	mov	r1, r3
 80002ea:	2303      	movs	r3, #3
 80002ec:	408b      	lsls	r3, r1
 80002ee:	43db      	mvns	r3, r3
 80002f0:	401a      	ands	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	791b      	ldrb	r3, [r3, #4]
 80002fe:	4619      	mov	r1, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	fa01 f303 	lsl.w	r3, r1, r3
 8000308:	431a      	orrs	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	791b      	ldrb	r3, [r3, #4]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d003      	beq.n	800031e <GPIO_Init+0x76>
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	2b02      	cmp	r3, #2
 800031c:	d12e      	bne.n	800037c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	4619      	mov	r1, r3
 8000328:	2303      	movs	r3, #3
 800032a:	408b      	lsls	r3, r1
 800032c:	43db      	mvns	r3, r3
 800032e:	401a      	ands	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	689a      	ldr	r2, [r3, #8]
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	4619      	mov	r1, r3
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	431a      	orrs	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	685a      	ldr	r2, [r3, #4]
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	b29b      	uxth	r3, r3
 8000354:	4619      	mov	r1, r3
 8000356:	2301      	movs	r3, #1
 8000358:	408b      	lsls	r3, r1
 800035a:	43db      	mvns	r3, r3
 800035c:	401a      	ands	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	7992      	ldrb	r2, [r2, #6]
 800036a:	4611      	mov	r1, r2
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	b292      	uxth	r2, r2
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	b292      	uxth	r2, r2
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	68da      	ldr	r2, [r3, #12]
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	b29b      	uxth	r3, r3
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	2103      	movs	r1, #3
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	79db      	ldrb	r3, [r3, #7]
 800039c:	4619      	mov	r1, r3
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	fa01 f303 	lsl.w	r3, r1, r3
 80003a6:	431a      	orrs	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	3301      	adds	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	2b0f      	cmp	r3, #15
 80003b6:	d985      	bls.n	80002c4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80003b8:	371c      	adds	r7, #28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2200      	movs	r2, #0
 80003d8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2200      	movs	r2, #0
 80003e4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2200      	movs	r2, #0
 80003ea:	71da      	strb	r2, [r3, #7]
}
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop

080003f8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	460b      	mov	r3, r1
 8000402:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8000404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000408:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800040a:	887a      	ldrh	r2, [r7, #2]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	4313      	orrs	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000418:	887a      	ldrh	r2, [r7, #2]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	60fb      	str	r3, [r7, #12]
}
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	691a      	ldr	r2, [r3, #16]
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	4013      	ands	r3, r2
 8000454:	2b00      	cmp	r3, #0
 8000456:	d002      	beq.n	800045e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000458:	2301      	movs	r3, #1
 800045a:	73fb      	strb	r3, [r7, #15]
 800045c:	e001      	b.n	8000462 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000462:	7bfb      	ldrb	r3, [r7, #15]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	691b      	ldr	r3, [r3, #16]
 800047c:	b29b      	uxth	r3, r3
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000498:	2300      	movs	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	887b      	ldrh	r3, [r7, #2]
 80004a2:	4013      	ands	r3, r2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d002      	beq.n	80004ae <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80004a8:	2301      	movs	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
 80004ac:	e001      	b.n	80004b2 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80004ae:	2300      	movs	r3, #0
 80004b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	b29b      	uxth	r3, r3
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	887a      	ldrh	r2, [r7, #2]
 80004ec:	831a      	strh	r2, [r3, #24]
}
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	887a      	ldrh	r2, [r7, #2]
 8000508:	835a      	strh	r2, [r3, #26]
}
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	807b      	strh	r3, [r7, #2]
 8000520:	4613      	mov	r3, r2
 8000522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000524:	787b      	ldrb	r3, [r7, #1]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d003      	beq.n	8000532 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	887a      	ldrh	r2, [r7, #2]
 800052e:	831a      	strh	r2, [r3, #24]
 8000530:	e002      	b.n	8000538 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	887a      	ldrh	r2, [r7, #2]
 8000536:	835a      	strh	r2, [r3, #26]
  }
}
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000550:	887a      	ldrh	r2, [r7, #2]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	615a      	str	r2, [r3, #20]
}
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	887b      	ldrh	r3, [r7, #2]
 8000572:	405a      	eors	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	615a      	str	r2, [r3, #20]
}
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
 8000590:	4613      	mov	r3, r2
 8000592:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800059c:	787b      	ldrb	r3, [r7, #1]
 800059e:	887a      	ldrh	r2, [r7, #2]
 80005a0:	f002 0207 	and.w	r2, r2, #7
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	4093      	lsls	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005aa:	887b      	ldrh	r3, [r7, #2]
 80005ac:	08db      	lsrs	r3, r3, #3
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	887b      	ldrh	r3, [r7, #2]
 80005b4:	08db      	lsrs	r3, r3, #3
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3208      	adds	r2, #8
 80005be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005c2:	887b      	ldrh	r3, [r7, #2]
 80005c4:	f003 0307 	and.w	r3, r3, #7
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4619      	mov	r1, r3
 80005cc:	230f      	movs	r3, #15
 80005ce:	408b      	lsls	r3, r1
 80005d0:	43db      	mvns	r3, r3
 80005d2:	ea02 0103 	and.w	r1, r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f100 0208 	add.w	r2, r0, #8
 80005dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	08db      	lsrs	r3, r3, #3
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3208      	adds	r2, #8
 80005ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80005f6:	887b      	ldrh	r3, [r7, #2]
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3208      	adds	r2, #8
 8000602:	68b9      	ldr	r1, [r7, #8]
 8000604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <low_level_init>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void low_level_init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000618:	4a11      	ldr	r2, [pc, #68]	; (8000660 <low_level_init+0x4c>)
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <low_level_init+0x4c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <low_level_init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <low_level_init+0x4c>)
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <low_level_init+0x4c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000638:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <low_level_init+0x4c>)
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <low_level_init+0x50>)
 800063e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <low_level_init+0x4c>)
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <low_level_init+0x4c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800064a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <low_level_init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000652:	f000 f80b 	bl	800066c <SetSysClock>
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  copy_vector_table_to_sram();
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <low_level_init+0x54>)
 8000658:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800065c:	609a      	str	r2, [r3, #8]
#endif
}
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	24003010 	.word	0x24003010
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800067a:	4a36      	ldr	r2, [pc, #216]	; (8000754 <SetSysClock+0xe8>)
 800067c:	4b35      	ldr	r3, [pc, #212]	; (8000754 <SetSysClock+0xe8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000684:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <SetSysClock+0xe8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d103      	bne.n	80006a4 <SetSysClock+0x38>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80006a2:	d1f0      	bne.n	8000686 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SetSysClock+0xe8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80006b0:	2301      	movs	r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	e001      	b.n	80006ba <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d143      	bne.n	8000748 <SetSysClock+0xdc>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006c0:	4a24      	ldr	r2, [pc, #144]	; (8000754 <SetSysClock+0xe8>)
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <SetSysClock+0xe8>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80006cc:	4a22      	ldr	r2, [pc, #136]	; (8000758 <SetSysClock+0xec>)
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SetSysClock+0xec>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006d8:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <SetSysClock+0xe8>)
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <SetSysClock+0xe8>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006e0:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <SetSysClock+0xe8>)
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <SetSysClock+0xe8>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ea:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006ec:	4a19      	ldr	r2, [pc, #100]	; (8000754 <SetSysClock+0xe8>)
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <SetSysClock+0xe8>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80006f6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <SetSysClock+0xe8>)
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <SetSysClock+0xf0>)
 80006fc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <SetSysClock+0xe8>)
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <SetSysClock+0xe8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000708:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800070a:	bf00      	nop
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <SetSysClock+0xe8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f9      	beq.n	800070c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <SetSysClock+0xf4>)
 800071a:	f240 6205 	movw	r2, #1541	; 0x605
 800071e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <SetSysClock+0xe8>)
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <SetSysClock+0xe8>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	f023 0303 	bic.w	r3, r3, #3
 800072a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <SetSysClock+0xe8>)
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <SetSysClock+0xe8>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000738:	bf00      	nop
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <SetSysClock+0xe8>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f003 030c 	and.w	r3, r3, #12
 8000742:	2b08      	cmp	r3, #8
 8000744:	d1f9      	bne.n	800073a <SetSysClock+0xce>
 8000746:	e000      	b.n	800074a <SetSysClock+0xde>
    }
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
       while(1){};
 8000748:	e7fe      	b.n	8000748 <SetSysClock+0xdc>
  }
}
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000
 800075c:	07405408 	.word	0x07405408
 8000760:	40023c00 	.word	0x40023c00

08000764 <copy_vector_table_to_sram>:

static void copy_vector_table_to_sram(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

}
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
}
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000780:	e7fe      	b.n	8000780 <HardFault_Handler+0x4>
 8000782:	bf00      	nop

08000784 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>
 800078a:	bf00      	nop

0800078c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000790:	e7fe      	b.n	8000790 <BusFault_Handler+0x4>
 8000792:	bf00      	nop

08000794 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>
 800079a:	bf00      	nop

0800079c <SVC_Handler>:
}

/* SVCall exception handler */
void SVC_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
}
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
}
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/* PendSVC exception handler */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
}
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/* SysTick Handler */
void SysTick_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  __stm32_tick++;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Handler+0x18>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <SysTick_Handler+0x18>)
 80007cc:	6013      	str	r3, [r2, #0]
}
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	200001ac 	.word	0x200001ac

080007dc <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <RCC_DeInit+0x48>)
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <RCC_DeInit+0x48>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <RCC_DeInit+0x48>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <RCC_DeInit+0x48>)
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <RCC_DeInit+0x48>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000800:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <RCC_DeInit+0x48>)
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <RCC_DeInit+0x4c>)
 8000806:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <RCC_DeInit+0x48>)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <RCC_DeInit+0x48>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000812:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <RCC_DeInit+0x48>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
}
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	24003010 	.word	0x24003010

0800082c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <RCC_HSEConfig+0x20>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800083c:	4a03      	ldr	r2, [pc, #12]	; (800084c <RCC_HSEConfig+0x20>)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	7013      	strb	r3, [r2, #0]
}
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	40023802 	.word	0x40023802

08000850 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000862:	2031      	movs	r0, #49	; 0x31
 8000864:	f000 fc86 	bl	8001174 <RCC_GetFlagStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000878:	d002      	beq.n	8000880 <RCC_WaitForHSEStartUp+0x30>
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0f0      	beq.n	8000862 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000880:	2031      	movs	r0, #49	; 0x31
 8000882:	f000 fc77 	bl	8001174 <RCC_GetFlagStatus>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800088c:	2301      	movs	r3, #1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	e001      	b.n	8000896 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000896:	79fb      	ldrb	r3, [r7, #7]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <RCC_AdjustHSICalibrationValue+0x38>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008ba:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <RCC_AdjustHSICalibrationValue+0x38>)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <RCC_HSICmd+0x1c>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	42470000 	.word	0x42470000

080008fc <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <RCC_LSEConfig+0x3c>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <RCC_LSEConfig+0x3c>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d002      	beq.n	800091e <RCC_LSEConfig+0x22>
 8000918:	2b04      	cmp	r3, #4
 800091a:	d004      	beq.n	8000926 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 800091c:	e007      	b.n	800092e <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <RCC_LSEConfig+0x3c>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
      break;
 8000924:	e003      	b.n	800092e <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <RCC_LSEConfig+0x3c>)
 8000928:	2205      	movs	r2, #5
 800092a:	701a      	strb	r2, [r3, #0]
      break;
 800092c:	bf00      	nop
    default:
      break;
  }
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	40023870 	.word	0x40023870

0800093c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <RCC_LSICmd+0x1c>)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	42470e80 	.word	0x42470e80

0800095c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800096a:	490a      	ldr	r1, [pc, #40]	; (8000994 <RCC_PLLConfig+0x38>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	019a      	lsls	r2, r3, #6
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	431a      	orrs	r2, r3
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	085b      	lsrs	r3, r3, #1
 8000978:	3b01      	subs	r3, #1
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	431a      	orrs	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	061b      	lsls	r3, r3, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000986:	4313      	orrs	r3, r2
 8000988:	604b      	str	r3, [r1, #4]
                 (PLLQ << 24);
}
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	40023800 	.word	0x40023800

08000998 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <RCC_PLLCmd+0x1c>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	42470060 	.word	0x42470060

080009b8 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80009c2:	4906      	ldr	r1, [pc, #24]	; (80009dc <RCC_PLLI2SConfig+0x24>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	019a      	lsls	r2, r3, #6
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	071b      	lsls	r3, r3, #28
 80009cc:	4313      	orrs	r3, r2
 80009ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	40023800 	.word	0x40023800

080009e0 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <RCC_PLLI2SCmd+0x1c>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	42470068 	.word	0x42470068

08000a00 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <RCC_ClockSecuritySystemCmd+0x1c>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	4247004c 	.word	0x4247004c

08000a20 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <RCC_MCO1Config+0x38>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000a3a:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <RCC_MCO1Config+0x38>)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6093      	str	r3, [r2, #8]
}
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40023800 	.word	0x40023800

08000a5c <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <RCC_MCO2Config+0x38>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000a76:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <RCC_MCO2Config+0x38>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6093      	str	r3, [r2, #8]
}
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800

08000a98 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <RCC_SYSCLKConfig+0x34>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f023 0303 	bic.w	r3, r3, #3
 8000ab0:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <RCC_SYSCLKConfig+0x34>)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6093      	str	r3, [r2, #8]
}
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <RCC_GetSYSCLKSource+0x1c>)
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f003 030c 	and.w	r3, r3, #12
 8000ade:	b2db      	uxtb	r3, r3
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <RCC_HCLKConfig+0x34>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <RCC_HCLKConfig+0x34>)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	6093      	str	r3, [r2, #8]
}
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <RCC_PCLK1Config+0x34>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <RCC_PCLK1Config+0x34>)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6093      	str	r3, [r2, #8]
}
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <RCC_PCLK2Config+0x34>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <RCC_PCLK2Config+0x34>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6093      	str	r3, [r2, #8]
}
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40023800 	.word	0x40023800

08000b98 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	2302      	movs	r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000bb8:	4b48      	ldr	r3, [pc, #288]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d007      	beq.n	8000bd8 <RCC_GetClocksFreq+0x40>
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d009      	beq.n	8000be0 <RCC_GetClocksFreq+0x48>
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d13f      	bne.n	8000c50 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a43      	ldr	r2, [pc, #268]	; (8000ce0 <RCC_GetClocksFreq+0x148>)
 8000bd4:	601a      	str	r2, [r3, #0]
      break;
 8000bd6:	e03f      	b.n	8000c58 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a42      	ldr	r2, [pc, #264]	; (8000ce4 <RCC_GetClocksFreq+0x14c>)
 8000bdc:	601a      	str	r2, [r3, #0]
      break;
 8000bde:	e03b      	b.n	8000c58 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be8:	0d9b      	lsrs	r3, r3, #22
 8000bea:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bec:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bf4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00d      	beq.n	8000c18 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000bfc:	4a39      	ldr	r2, [pc, #228]	; (8000ce4 <RCC_GetClocksFreq+0x14c>)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000c06:	6859      	ldr	r1, [r3, #4]
 8000c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	099b      	lsrs	r3, r3, #6
 8000c10:	fb03 f302 	mul.w	r3, r3, r2
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	e00c      	b.n	8000c32 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000c18:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <RCC_GetClocksFreq+0x148>)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000c22:	6859      	ldr	r1, [r3, #4]
 8000c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c28:	400b      	ands	r3, r1
 8000c2a:	099b      	lsrs	r3, r3, #6
 8000c2c:	fb03 f302 	mul.w	r3, r3, r2
 8000c30:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]
      break;
 8000c4e:	e003      	b.n	8000c58 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <RCC_GetClocksFreq+0x148>)
 8000c54:	601a      	str	r2, [r3, #0]
      break;
 8000c56:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c60:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	091b      	lsrs	r3, r3, #4
 8000c66:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c68:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <RCC_GetClocksFreq+0x150>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	40da      	lsrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	0a9b      	lsrs	r3, r3, #10
 8000c8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c90:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <RCC_GetClocksFreq+0x150>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	40da      	lsrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <RCC_GetClocksFreq+0x144>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000cb0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	0b5b      	lsrs	r3, r3, #13
 8000cb6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <RCC_GetClocksFreq+0x150>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	40da      	lsrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60da      	str	r2, [r3, #12]
}
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	00f42400 	.word	0x00f42400
 8000ce4:	017d7840 	.word	0x017d7840
 8000ce8:	2000019c 	.word	0x2000019c

08000cec <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d02:	d111      	bne.n	8000d28 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <RCC_RTCCLKConfig+0x58>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8000d10:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <RCC_RTCCLKConfig+0x58>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000d28:	4906      	ldr	r1, [pc, #24]	; (8000d44 <RCC_RTCCLKConfig+0x58>)
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <RCC_RTCCLKConfig+0x58>)
 8000d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d34:	4313      	orrs	r3, r2
 8000d36:	670b      	str	r3, [r1, #112]	; 0x70
}
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <RCC_RTCCLKCmd+0x1c>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	42470e3c 	.word	0x42470e3c

08000d68 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <RCC_BackupResetCmd+0x1c>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	42470e40 	.word	0x42470e40

08000d88 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <RCC_I2SCLKConfig+0x18>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
}
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	4247015c 	.word	0x4247015c

08000da4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000db6:	4909      	ldr	r1, [pc, #36]	; (8000ddc <RCC_AHB1PeriphClockCmd+0x38>)
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <RCC_AHB1PeriphClockCmd+0x38>)
 8000dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	630b      	str	r3, [r1, #48]	; 0x30
 8000dc2:	e006      	b.n	8000dd2 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000dc4:	4905      	ldr	r1, [pc, #20]	; (8000ddc <RCC_AHB1PeriphClockCmd+0x38>)
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <RCC_AHB1PeriphClockCmd+0x38>)
 8000dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4013      	ands	r3, r2
 8000dd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40023800 	.word	0x40023800

08000de0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000df2:	4909      	ldr	r1, [pc, #36]	; (8000e18 <RCC_AHB2PeriphClockCmd+0x38>)
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <RCC_AHB2PeriphClockCmd+0x38>)
 8000df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	634b      	str	r3, [r1, #52]	; 0x34
 8000dfe:	e006      	b.n	8000e0e <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000e00:	4905      	ldr	r1, [pc, #20]	; (8000e18 <RCC_AHB2PeriphClockCmd+0x38>)
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <RCC_AHB2PeriphClockCmd+0x38>)
 8000e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	634b      	str	r3, [r1, #52]	; 0x34
  }
}
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40023800 	.word	0x40023800

08000e1c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000e2e:	4909      	ldr	r1, [pc, #36]	; (8000e54 <RCC_AHB3PeriphClockCmd+0x38>)
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <RCC_AHB3PeriphClockCmd+0x38>)
 8000e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	638b      	str	r3, [r1, #56]	; 0x38
 8000e3a:	e006      	b.n	8000e4a <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000e3c:	4905      	ldr	r1, [pc, #20]	; (8000e54 <RCC_AHB3PeriphClockCmd+0x38>)
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <RCC_AHB3PeriphClockCmd+0x38>)
 8000e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4013      	ands	r3, r2
 8000e48:	638b      	str	r3, [r1, #56]	; 0x38
  }
}
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40023800 	.word	0x40023800

08000e58 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000e6a:	4909      	ldr	r1, [pc, #36]	; (8000e90 <RCC_APB1PeriphClockCmd+0x38>)
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <RCC_APB1PeriphClockCmd+0x38>)
 8000e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	640b      	str	r3, [r1, #64]	; 0x40
 8000e76:	e006      	b.n	8000e86 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000e78:	4905      	ldr	r1, [pc, #20]	; (8000e90 <RCC_APB1PeriphClockCmd+0x38>)
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <RCC_APB1PeriphClockCmd+0x38>)
 8000e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4013      	ands	r3, r2
 8000e84:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40023800 	.word	0x40023800

08000e94 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ea6:	4909      	ldr	r1, [pc, #36]	; (8000ecc <RCC_APB2PeriphClockCmd+0x38>)
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <RCC_APB2PeriphClockCmd+0x38>)
 8000eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	644b      	str	r3, [r1, #68]	; 0x44
 8000eb2:	e006      	b.n	8000ec2 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000eb4:	4905      	ldr	r1, [pc, #20]	; (8000ecc <RCC_APB2PeriphClockCmd+0x38>)
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <RCC_APB2PeriphClockCmd+0x38>)
 8000eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000ee2:	4909      	ldr	r1, [pc, #36]	; (8000f08 <RCC_AHB1PeriphResetCmd+0x38>)
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <RCC_AHB1PeriphResetCmd+0x38>)
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	610b      	str	r3, [r1, #16]
 8000eee:	e006      	b.n	8000efe <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000ef0:	4905      	ldr	r1, [pc, #20]	; (8000f08 <RCC_AHB1PeriphResetCmd+0x38>)
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <RCC_AHB1PeriphResetCmd+0x38>)
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4013      	ands	r3, r2
 8000efc:	610b      	str	r3, [r1, #16]
  }
}
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40023800 	.word	0x40023800

08000f0c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000f1e:	4909      	ldr	r1, [pc, #36]	; (8000f44 <RCC_AHB2PeriphResetCmd+0x38>)
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <RCC_AHB2PeriphResetCmd+0x38>)
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	614b      	str	r3, [r1, #20]
 8000f2a:	e006      	b.n	8000f3a <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000f2c:	4905      	ldr	r1, [pc, #20]	; (8000f44 <RCC_AHB2PeriphResetCmd+0x38>)
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <RCC_AHB2PeriphResetCmd+0x38>)
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4013      	ands	r3, r2
 8000f38:	614b      	str	r3, [r1, #20]
  }
}
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40023800 	.word	0x40023800

08000f48 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000f5a:	4909      	ldr	r1, [pc, #36]	; (8000f80 <RCC_AHB3PeriphResetCmd+0x38>)
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <RCC_AHB3PeriphResetCmd+0x38>)
 8000f5e:	699a      	ldr	r2, [r3, #24]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	618b      	str	r3, [r1, #24]
 8000f66:	e006      	b.n	8000f76 <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000f68:	4905      	ldr	r1, [pc, #20]	; (8000f80 <RCC_AHB3PeriphResetCmd+0x38>)
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <RCC_AHB3PeriphResetCmd+0x38>)
 8000f6c:	699a      	ldr	r2, [r3, #24]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4013      	ands	r3, r2
 8000f74:	618b      	str	r3, [r1, #24]
  }
}
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40023800 	.word	0x40023800

08000f84 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f96:	4909      	ldr	r1, [pc, #36]	; (8000fbc <RCC_APB1PeriphResetCmd+0x38>)
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <RCC_APB1PeriphResetCmd+0x38>)
 8000f9a:	6a1a      	ldr	r2, [r3, #32]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	620b      	str	r3, [r1, #32]
 8000fa2:	e006      	b.n	8000fb2 <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000fa4:	4905      	ldr	r1, [pc, #20]	; (8000fbc <RCC_APB1PeriphResetCmd+0x38>)
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <RCC_APB1PeriphResetCmd+0x38>)
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4013      	ands	r3, r2
 8000fb0:	620b      	str	r3, [r1, #32]
  }
}
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000fd2:	4909      	ldr	r1, [pc, #36]	; (8000ff8 <RCC_APB2PeriphResetCmd+0x38>)
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <RCC_APB2PeriphResetCmd+0x38>)
 8000fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	624b      	str	r3, [r1, #36]	; 0x24
 8000fde:	e006      	b.n	8000fee <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000fe0:	4905      	ldr	r1, [pc, #20]	; (8000ff8 <RCC_APB2PeriphResetCmd+0x38>)
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <RCC_APB2PeriphResetCmd+0x38>)
 8000fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4013      	ands	r3, r2
 8000fec:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40023800 	.word	0x40023800

08000ffc <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800100e:	4909      	ldr	r1, [pc, #36]	; (8001034 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8001012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4313      	orrs	r3, r2
 8001018:	650b      	str	r3, [r1, #80]	; 0x50
 800101a:	e006      	b.n	800102a <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800101c:	4905      	ldr	r1, [pc, #20]	; (8001034 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8001020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	43db      	mvns	r3, r3
 8001026:	4013      	ands	r3, r2
 8001028:	650b      	str	r3, [r1, #80]	; 0x50
  }
}
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40023800 	.word	0x40023800

08001038 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800104a:	4909      	ldr	r1, [pc, #36]	; (8001070 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800104e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	654b      	str	r3, [r1, #84]	; 0x54
 8001056:	e006      	b.n	8001066 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001058:	4905      	ldr	r1, [pc, #20]	; (8001070 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800105c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	43db      	mvns	r3, r3
 8001062:	4013      	ands	r3, r2
 8001064:	654b      	str	r3, [r1, #84]	; 0x54
  }
}
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40023800 	.word	0x40023800

08001074 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001086:	4909      	ldr	r1, [pc, #36]	; (80010ac <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800108a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4313      	orrs	r3, r2
 8001090:	658b      	str	r3, [r1, #88]	; 0x58
 8001092:	e006      	b.n	80010a2 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001094:	4905      	ldr	r1, [pc, #20]	; (80010ac <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8001098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	43db      	mvns	r3, r3
 800109e:	4013      	ands	r3, r2
 80010a0:	658b      	str	r3, [r1, #88]	; 0x58
  }
}
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40023800 	.word	0x40023800

080010b0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80010c2:	4909      	ldr	r1, [pc, #36]	; (80010e8 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 80010c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	660b      	str	r3, [r1, #96]	; 0x60
 80010ce:	e006      	b.n	80010de <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80010d0:	4905      	ldr	r1, [pc, #20]	; (80010e8 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 80010d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	43db      	mvns	r3, r3
 80010da:	4013      	ands	r3, r2
 80010dc:	660b      	str	r3, [r1, #96]	; 0x60
  }
}
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40023800 	.word	0x40023800

080010ec <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80010fe:	4909      	ldr	r1, [pc, #36]	; (8001124 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8001102:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	664b      	str	r3, [r1, #100]	; 0x64
 800110a:	e006      	b.n	800111a <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800110c:	4905      	ldr	r1, [pc, #20]	; (8001124 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8001110:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	43db      	mvns	r3, r3
 8001116:	4013      	ands	r3, r2
 8001118:	664b      	str	r3, [r1, #100]	; 0x64
  }
}
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40023800 	.word	0x40023800

08001128 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d008      	beq.n	8001150 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800113e:	490c      	ldr	r1, [pc, #48]	; (8001170 <RCC_ITConfig+0x48>)
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <RCC_ITConfig+0x48>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4313      	orrs	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	700b      	strb	r3, [r1, #0]
 800114e:	e009      	b.n	8001164 <RCC_ITConfig+0x3c>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <RCC_ITConfig+0x48>)
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <RCC_ITConfig+0x48>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	43db      	mvns	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4013      	ands	r3, r2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	700b      	strb	r3, [r1, #0]
  }
}
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	4002380d 	.word	0x4002380d

08001174 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	b2db      	uxtb	r3, r3
 8001190:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d103      	bne.n	80011a0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <RCC_GetFlagStatus+0x70>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e009      	b.n	80011b4 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d103      	bne.n	80011ae <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <RCC_GetFlagStatus+0x70>)
 80011a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e002      	b.n	80011b4 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <RCC_GetFlagStatus+0x70>)
 80011b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80011cc:	2301      	movs	r3, #1
 80011ce:	74fb      	strb	r3, [r7, #19]
 80011d0:	e001      	b.n	80011d6 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80011d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40023800 	.word	0x40023800

080011e8 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <RCC_ClearFlag+0x18>)
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <RCC_ClearFlag+0x18>)
 80011f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f6:	6753      	str	r3, [r2, #116]	; 0x74
}
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40023800 	.word	0x40023800

08001204 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <RCC_GetITStatus+0x34>)
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e001      	b.n	8001228 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <RCC_ClearITPendingBit+0x1c>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	7013      	strb	r3, [r2, #0]
}
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	4002380e 	.word	0x4002380e

0800125c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <NVIC_PriorityGroupConfig+0x20>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	60d3      	str	r3, [r2, #12]
}
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	2300      	movs	r3, #0
 800128e:	73bb      	strb	r3, [r7, #14]
 8001290:	230f      	movs	r3, #15
 8001292:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	78db      	ldrb	r3, [r3, #3]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d038      	beq.n	800130e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <NVIC_Init+0xb8>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	f1c3 0304 	rsb	r3, r3, #4
 80012b0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80012b2:	7b7a      	ldrb	r2, [r7, #13]
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	fa42 f303 	asr.w	r3, r2, r3
 80012ba:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	461a      	mov	r2, r3
 80012c2:	7bbb      	ldrb	r3, [r7, #14]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	789a      	ldrb	r2, [r3, #2]
 80012ce:	7b7b      	ldrb	r3, [r7, #13]
 80012d0:	4013      	ands	r3, r2
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <NVIC_Init+0xbc>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80012ee:	4a13      	ldr	r2, [pc, #76]	; (800133c <NVIC_Init+0xbc>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	095b      	lsrs	r3, r3, #5
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001308:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800130c:	e00f      	b.n	800132e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800130e:	490b      	ldr	r1, [pc, #44]	; (800133c <NVIC_Init+0xbc>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	2201      	movs	r2, #1
 8001324:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001326:	f100 0320 	add.w	r3, r0, #32
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	e000e100 	.word	0xe000e100

08001340 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800134a:	4907      	ldr	r1, [pc, #28]	; (8001368 <NVIC_SetVectorTable+0x28>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001352:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4313      	orrs	r3, r2
 800135a:	608b      	str	r3, [r1, #8]
}
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	460a      	mov	r2, r1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	4613      	mov	r3, r2
 800137a:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 8001382:	4909      	ldr	r1, [pc, #36]	; (80013a8 <NVIC_SystemLPConfig+0x3c>)
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <NVIC_SystemLPConfig+0x3c>)
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4313      	orrs	r3, r2
 800138c:	610b      	str	r3, [r1, #16]
 800138e:	e006      	b.n	800139e <NVIC_SystemLPConfig+0x32>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001390:	4905      	ldr	r1, [pc, #20]	; (80013a8 <NVIC_SystemLPConfig+0x3c>)
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <NVIC_SystemLPConfig+0x3c>)
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	43db      	mvns	r3, r3
 800139a:	4013      	ands	r3, r2
 800139c:	610b      	str	r3, [r1, #16]
  }
}
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d106      	bne.n	80013c8 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <SysTick_CLKSourceConfig+0x34>)
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <SysTick_CLKSourceConfig+0x34>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e005      	b.n	80013d4 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <SysTick_CLKSourceConfig+0x34>)
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_CLKSourceConfig+0x34>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	6013      	str	r3, [r2, #0]
  }
}
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <main>:
void INTTIM_Config(void);
void GPIO_Config(void);

/* main C entry point */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
    int i=0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]

    // GPIOD INIT
    GPIO_Config();
 80013ee:	f000 f807 	bl	8001400 <GPIO_Config>
    // TIMER2 INIT
    INTTIM_Config();
 80013f2:	f000 f839 	bl	8001468 <INTTIM_Config>

    for EVER
    {
        // regular task processing here
        i++;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
    }
 80013fc:	e7fb      	b.n	80013f6 <main+0x12>
 80013fe:	bf00      	nop

08001400 <GPIO_Config>:
}

void GPIO_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
    /* RCC clock config */
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <GPIO_Config+0x54>)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <GPIO_Config+0x54>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	; 0x30

    /*-------------------------- GPIO Configuration ----------------------------*/
    /* GPIOD Configuration: Pins 12, 13, 14 and 15 in output push-pull          */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001412:	2008      	movs	r0, #8
 8001414:	2101      	movs	r1, #1
 8001416:	f7ff fcc5 	bl	8000da4 <RCC_AHB1PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure = { 0 };
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]

    // Fill the GPIO initialization structure
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 |
 8001422:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001426:	603b      	str	r3, [r7, #0]
                                  GPIO_Pin_14 | GPIO_Pin_15;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;    //Ouput
 8001428:	2301      	movs	r3, #1
 800142a:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;   //Output type: Push-Pull
 800142c:	2300      	movs	r3, #0
 800142e:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; //No pull-up or pull-down
 8001430:	2300      	movs	r3, #0
 8001432:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001434:	2303      	movs	r3, #3
 8001436:	717b      	strb	r3, [r7, #5]

    // Initialize the GPIO
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001438:	463b      	mov	r3, r7
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <GPIO_Config+0x58>)
 800143c:	4619      	mov	r1, r3
 800143e:	f7fe ff33 	bl	80002a8 <GPIO_Init>


    // When configured, toggle only PIN13 and PIN15, keep PIN12 and 14 as they are
    GPIO_ToggleBits(GPIOD, GPIO_Pin_13 | GPIO_Pin_15);
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <GPIO_Config+0x58>)
 8001444:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001448:	f7ff f88a 	bl	8000560 <GPIO_ToggleBits>
}
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40020c00 	.word	0x40020c00

0800145c <TIM2_IRQHandler>:

/*Overwrites the weak pointer from startup.s*/
void TIM2_IRQHandler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
    #if IMPLEMENTING
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    // On timer interrupt, we will toggle all pins (PIN12 and PIN13 and PIN14 and PIN15

    #endif /*IMPLEMENTING*/
}
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <INTTIM_Config>:

void INTTIM_Config(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
    TIM_ITConfig( ... )
    
    // Enable counter
    TIM_Cmd( ... )
    #endif /*IMPLEMENTING*/
}
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a5f      	ldr	r2, [pc, #380]	; (80015fc <TIM_DeInit+0x188>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d108      	bne.n	8001496 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001484:	2001      	movs	r0, #1
 8001486:	2101      	movs	r1, #1
 8001488:	f7ff fd9a 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800148c:	2001      	movs	r0, #1
 800148e:	2100      	movs	r1, #0
 8001490:	f7ff fd96 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
 8001494:	e0af      	b.n	80015f6 <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800149c:	d108      	bne.n	80014b0 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800149e:	2001      	movs	r0, #1
 80014a0:	2101      	movs	r1, #1
 80014a2:	f7ff fd6f 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80014a6:	2001      	movs	r0, #1
 80014a8:	2100      	movs	r1, #0
 80014aa:	f7ff fd6b 	bl	8000f84 <RCC_APB1PeriphResetCmd>
 80014ae:	e0a2      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a53      	ldr	r2, [pc, #332]	; (8001600 <TIM_DeInit+0x18c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d108      	bne.n	80014ca <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80014b8:	2002      	movs	r0, #2
 80014ba:	2101      	movs	r1, #1
 80014bc:	f7ff fd62 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80014c0:	2002      	movs	r0, #2
 80014c2:	2100      	movs	r1, #0
 80014c4:	f7ff fd5e 	bl	8000f84 <RCC_APB1PeriphResetCmd>
 80014c8:	e095      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <TIM_DeInit+0x190>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d108      	bne.n	80014e4 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80014d2:	2004      	movs	r0, #4
 80014d4:	2101      	movs	r1, #1
 80014d6:	f7ff fd55 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80014da:	2004      	movs	r0, #4
 80014dc:	2100      	movs	r1, #0
 80014de:	f7ff fd51 	bl	8000f84 <RCC_APB1PeriphResetCmd>
 80014e2:	e088      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a48      	ldr	r2, [pc, #288]	; (8001608 <TIM_DeInit+0x194>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d108      	bne.n	80014fe <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80014ec:	2008      	movs	r0, #8
 80014ee:	2101      	movs	r1, #1
 80014f0:	f7ff fd48 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80014f4:	2008      	movs	r0, #8
 80014f6:	2100      	movs	r1, #0
 80014f8:	f7ff fd44 	bl	8000f84 <RCC_APB1PeriphResetCmd>
 80014fc:	e07b      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a42      	ldr	r2, [pc, #264]	; (800160c <TIM_DeInit+0x198>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d108      	bne.n	8001518 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001506:	2010      	movs	r0, #16
 8001508:	2101      	movs	r1, #1
 800150a:	f7ff fd3b 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800150e:	2010      	movs	r0, #16
 8001510:	2100      	movs	r1, #0
 8001512:	f7ff fd37 	bl	8000f84 <RCC_APB1PeriphResetCmd>
 8001516:	e06e      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <TIM_DeInit+0x19c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d108      	bne.n	8001532 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001520:	2020      	movs	r0, #32
 8001522:	2101      	movs	r1, #1
 8001524:	f7ff fd2e 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001528:	2020      	movs	r0, #32
 800152a:	2100      	movs	r1, #0
 800152c:	f7ff fd2a 	bl	8000f84 <RCC_APB1PeriphResetCmd>
 8001530:	e061      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a37      	ldr	r2, [pc, #220]	; (8001614 <TIM_DeInit+0x1a0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d108      	bne.n	800154c <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800153a:	2002      	movs	r0, #2
 800153c:	2101      	movs	r1, #1
 800153e:	f7ff fd3f 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001542:	2002      	movs	r0, #2
 8001544:	2100      	movs	r1, #0
 8001546:	f7ff fd3b 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
 800154a:	e054      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a32      	ldr	r2, [pc, #200]	; (8001618 <TIM_DeInit+0x1a4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d10a      	bne.n	800156a <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001554:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001558:	2101      	movs	r1, #1
 800155a:	f7ff fd31 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800155e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001562:	2100      	movs	r1, #0
 8001564:	f7ff fd2c 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
 8001568:	e045      	b.n	80015f6 <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a2b      	ldr	r2, [pc, #172]	; (800161c <TIM_DeInit+0x1a8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10a      	bne.n	8001588 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001572:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001576:	2101      	movs	r1, #1
 8001578:	f7ff fd22 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800157c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001580:	2100      	movs	r1, #0
 8001582:	f7ff fd1d 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
 8001586:	e036      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a25      	ldr	r2, [pc, #148]	; (8001620 <TIM_DeInit+0x1ac>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d10a      	bne.n	80015a6 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001590:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001594:	2101      	movs	r1, #1
 8001596:	f7ff fd13 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800159a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800159e:	2100      	movs	r1, #0
 80015a0:	f7ff fd0e 	bl	8000fc0 <RCC_APB2PeriphResetCmd>
 80015a4:	e027      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <TIM_DeInit+0x1b0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d108      	bne.n	80015c0 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80015ae:	2040      	movs	r0, #64	; 0x40
 80015b0:	2101      	movs	r1, #1
 80015b2:	f7ff fce7 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80015b6:	2040      	movs	r0, #64	; 0x40
 80015b8:	2100      	movs	r1, #0
 80015ba:	f7ff fce3 	bl	8000f84 <RCC_APB1PeriphResetCmd>
 80015be:	e01a      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a19      	ldr	r2, [pc, #100]	; (8001628 <TIM_DeInit+0x1b4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d108      	bne.n	80015da <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80015c8:	2080      	movs	r0, #128	; 0x80
 80015ca:	2101      	movs	r1, #1
 80015cc:	f7ff fcda 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80015d0:	2080      	movs	r0, #128	; 0x80
 80015d2:	2100      	movs	r1, #0
 80015d4:	f7ff fcd6 	bl	8000f84 <RCC_APB1PeriphResetCmd>
 80015d8:	e00d      	b.n	80015f6 <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a13      	ldr	r2, [pc, #76]	; (800162c <TIM_DeInit+0x1b8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d109      	bne.n	80015f6 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80015e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015e6:	2101      	movs	r1, #1
 80015e8:	f7ff fccc 	bl	8000f84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80015ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015f0:	2100      	movs	r1, #0
 80015f2:	f7ff fcc7 	bl	8000f84 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40010000 	.word	0x40010000
 8001600:	40000400 	.word	0x40000400
 8001604:	40000800 	.word	0x40000800
 8001608:	40000c00 	.word	0x40000c00
 800160c:	40001000 	.word	0x40001000
 8001610:	40001400 	.word	0x40001400
 8001614:	40010400 	.word	0x40010400
 8001618:	40014000 	.word	0x40014000
 800161c:	40014400 	.word	0x40014400
 8001620:	40014800 	.word	0x40014800
 8001624:	40001800 	.word	0x40001800
 8001628:	40001c00 	.word	0x40001c00
 800162c:	40002000 	.word	0x40002000

08001630 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a28      	ldr	r2, [pc, #160]	; (80016e8 <TIM_TimeBaseInit+0xb8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d013      	beq.n	8001674 <TIM_TimeBaseInit+0x44>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <TIM_TimeBaseInit+0xbc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d00f      	beq.n	8001674 <TIM_TimeBaseInit+0x44>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800165a:	d00b      	beq.n	8001674 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <TIM_TimeBaseInit+0xc0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d007      	beq.n	8001674 <TIM_TimeBaseInit+0x44>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <TIM_TimeBaseInit+0xc4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d003      	beq.n	8001674 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <TIM_TimeBaseInit+0xc8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d108      	bne.n	8001686 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800167a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	885a      	ldrh	r2, [r3, #2]
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	4313      	orrs	r3, r2
 8001684:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <TIM_TimeBaseInit+0xcc>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00c      	beq.n	80016a8 <TIM_TimeBaseInit+0x78>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <TIM_TimeBaseInit+0xd0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d008      	beq.n	80016a8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800169c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	891a      	ldrh	r2, [r3, #8]
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	89fa      	ldrh	r2, [r7, #14]
 80016ac:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <TIM_TimeBaseInit+0xb8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d003      	beq.n	80016ce <TIM_TimeBaseInit+0x9e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a08      	ldr	r2, [pc, #32]	; (80016ec <TIM_TimeBaseInit+0xbc>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d104      	bne.n	80016d8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	7a9b      	ldrb	r3, [r3, #10]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	829a      	strh	r2, [r3, #20]
}
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010400 	.word	0x40010400
 80016f0:	40000400 	.word	0x40000400
 80016f4:	40000800 	.word	0x40000800
 80016f8:	40000c00 	.word	0x40000c00
 80016fc:	40001000 	.word	0x40001000
 8001700:	40001400 	.word	0x40001400

08001704 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001712:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	729a      	strb	r2, [r3, #10]
}
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	883a      	ldrh	r2, [r7, #0]
 8001752:	829a      	strh	r2, [r3, #20]
}
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800177c:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800177e:	89fa      	ldrh	r2, [r7, #14]
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	4313      	orrs	r3, r2
 8001784:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	89fa      	ldrh	r2, [r7, #14]
 800178a:	801a      	strh	r2, [r3, #0]
}
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop

080017b4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	b29b      	uxth	r3, r3
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	801a      	strh	r2, [r3, #0]
 8001826:	e007      	b.n	8001838 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	f023 0302 	bic.w	r3, r3, #2
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	801a      	strh	r2, [r3, #0]
  }
}
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	b29a      	uxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	801a      	strh	r2, [r3, #0]
 8001866:	e007      	b.n	8001878 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	f023 0304 	bic.w	r3, r3, #4
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	801a      	strh	r2, [r3, #0]
  }
}
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	801a      	strh	r2, [r3, #0]
  }
}
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop

080018c4 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f023 0308 	bic.w	r3, r3, #8
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	801a      	strh	r2, [r3, #0]
}
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop

080018fc <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b29a      	uxth	r2, r3
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	4313      	orrs	r3, r2
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	801a      	strh	r2, [r3, #0]
}
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	801a      	strh	r2, [r3, #0]
  }
}
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	817b      	strh	r3, [r7, #10]
 8001982:	2300      	movs	r3, #0
 8001984:	81fb      	strh	r3, [r7, #14]
 8001986:	2300      	movs	r3, #0
 8001988:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	8c1b      	ldrh	r3, [r3, #32]
 800198e:	b29b      	uxth	r3, r3
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	8c1b      	ldrh	r3, [r3, #32]
 800199e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	889b      	ldrh	r3, [r3, #4]
 80019a4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	8b1b      	ldrh	r3, [r3, #24]
 80019aa:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80019ac:	897b      	ldrh	r3, [r7, #10]
 80019ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019b2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80019b4:	897b      	ldrh	r3, [r7, #10]
 80019b6:	f023 0303 	bic.w	r3, r3, #3
 80019ba:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	897b      	ldrh	r3, [r7, #10]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	f023 0302 	bic.w	r3, r3, #2
 80019cc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	899a      	ldrh	r2, [r3, #12]
 80019d2:	89fb      	ldrh	r3, [r7, #14]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	885a      	ldrh	r2, [r3, #2]
 80019dc:	89fb      	ldrh	r3, [r7, #14]
 80019de:	4313      	orrs	r3, r2
 80019e0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <TIM_OC1Init+0xec>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_OC1Init+0x7e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <TIM_OC1Init+0xf0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d123      	bne.n	8001a3a <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80019f2:	89fb      	ldrh	r3, [r7, #14]
 80019f4:	f023 0308 	bic.w	r3, r3, #8
 80019f8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	89da      	ldrh	r2, [r3, #14]
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	889a      	ldrh	r2, [r3, #4]
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8001a16:	89bb      	ldrh	r3, [r7, #12]
 8001a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a1c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001a1e:	89bb      	ldrh	r3, [r7, #12]
 8001a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a24:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	8a1a      	ldrh	r2, [r3, #16]
 8001a2a:	89bb      	ldrh	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	8a5a      	ldrh	r2, [r3, #18]
 8001a34:	89bb      	ldrh	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	89ba      	ldrh	r2, [r7, #12]
 8001a3e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	897a      	ldrh	r2, [r7, #10]
 8001a44:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	89fa      	ldrh	r2, [r7, #14]
 8001a52:	841a      	strh	r2, [r3, #32]
}
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40010400 	.word	0x40010400

08001a68 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	817b      	strh	r3, [r7, #10]
 8001a76:	2300      	movs	r3, #0
 8001a78:	81fb      	strh	r3, [r7, #14]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	8c1b      	ldrh	r3, [r3, #32]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f023 0310 	bic.w	r3, r3, #16
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	8c1b      	ldrh	r3, [r3, #32]
 8001a92:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	889b      	ldrh	r3, [r3, #4]
 8001a98:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8b1b      	ldrh	r3, [r3, #24]
 8001a9e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aa6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001aa8:	897b      	ldrh	r3, [r7, #10]
 8001aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aae:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	897b      	ldrh	r3, [r7, #10]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	f023 0320 	bic.w	r3, r3, #32
 8001ac4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	899b      	ldrh	r3, [r3, #12]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	89fb      	ldrh	r3, [r7, #14]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	885b      	ldrh	r3, [r3, #2]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <TIM_OC2Init+0x108>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d003      	beq.n	8001af2 <TIM_OC2Init+0x8a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <TIM_OC2Init+0x10c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d12b      	bne.n	8001b4a <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001af8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	89db      	ldrh	r3, [r3, #14]
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b0e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	889b      	ldrh	r3, [r3, #4]
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	89fb      	ldrh	r3, [r7, #14]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8001b1e:	89bb      	ldrh	r3, [r7, #12]
 8001b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b24:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001b26:	89bb      	ldrh	r3, [r7, #12]
 8001b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b2c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	8a1b      	ldrh	r3, [r3, #16]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	89bb      	ldrh	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	8a5b      	ldrh	r3, [r3, #18]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	89bb      	ldrh	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	89ba      	ldrh	r2, [r7, #12]
 8001b4e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	897a      	ldrh	r2, [r7, #10]
 8001b54:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	89fa      	ldrh	r2, [r7, #14]
 8001b62:	841a      	strh	r2, [r3, #32]
}
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010400 	.word	0x40010400

08001b78 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	817b      	strh	r3, [r7, #10]
 8001b86:	2300      	movs	r3, #0
 8001b88:	81fb      	strh	r3, [r7, #14]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8c1b      	ldrh	r3, [r3, #32]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	8c1b      	ldrh	r3, [r3, #32]
 8001ba2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	889b      	ldrh	r3, [r3, #4]
 8001ba8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	8b9b      	ldrh	r3, [r3, #28]
 8001bae:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001bb8:	897b      	ldrh	r3, [r7, #10]
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	897b      	ldrh	r3, [r7, #10]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bd0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	899b      	ldrh	r3, [r3, #12]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	885b      	ldrh	r3, [r3, #2]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <TIM_OC3Init+0x104>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d003      	beq.n	8001bfe <TIM_OC3Init+0x86>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <TIM_OC3Init+0x108>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12b      	bne.n	8001c56 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001bfe:	89fb      	ldrh	r3, [r7, #14]
 8001c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c04:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	89db      	ldrh	r3, [r3, #14]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c1a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	889b      	ldrh	r3, [r3, #4]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	89fb      	ldrh	r3, [r7, #14]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8001c2a:	89bb      	ldrh	r3, [r7, #12]
 8001c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c30:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001c32:	89bb      	ldrh	r3, [r7, #12]
 8001c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c38:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	8a1b      	ldrh	r3, [r3, #16]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	89bb      	ldrh	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	8a5b      	ldrh	r3, [r3, #18]
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	89bb      	ldrh	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	89ba      	ldrh	r2, [r7, #12]
 8001c5a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	897a      	ldrh	r2, [r7, #10]
 8001c60:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	89fa      	ldrh	r2, [r7, #14]
 8001c6e:	841a      	strh	r2, [r3, #32]
}
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40010400 	.word	0x40010400

08001c84 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	81bb      	strh	r3, [r7, #12]
 8001c92:	2300      	movs	r3, #0
 8001c94:	817b      	strh	r3, [r7, #10]
 8001c96:	2300      	movs	r3, #0
 8001c98:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	8c1b      	ldrh	r3, [r3, #32]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	8c1b      	ldrh	r3, [r3, #32]
 8001cae:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	889b      	ldrh	r3, [r3, #4]
 8001cb4:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8b9b      	ldrh	r3, [r3, #28]
 8001cba:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001cbc:	89bb      	ldrh	r3, [r7, #12]
 8001cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cc2:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001cc4:	89bb      	ldrh	r3, [r7, #12]
 8001cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cca:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	89bb      	ldrh	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ce0:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	899b      	ldrh	r3, [r3, #12]
 8001ce6:	031b      	lsls	r3, r3, #12
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	031b      	lsls	r3, r3, #12
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <TIM_OC4Init+0xc4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d003      	beq.n	8001d0e <TIM_OC4Init+0x8a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <TIM_OC4Init+0xc8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10a      	bne.n	8001d24 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d14:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	8a1b      	ldrh	r3, [r3, #16]
 8001d1a:	019b      	lsls	r3, r3, #6
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	89fb      	ldrh	r3, [r7, #14]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	89fa      	ldrh	r2, [r7, #14]
 8001d28:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	89ba      	ldrh	r2, [r7, #12]
 8001d2e:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	897a      	ldrh	r2, [r7, #10]
 8001d3c:	841a      	strh	r2, [r3, #32]
}
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	40010400 	.word	0x40010400

08001d50 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	825a      	strh	r2, [r3, #18]
}
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop

08001d94 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3318      	adds	r3, #24
 8001db4:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	2201      	movs	r2, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	8c1b      	ldrh	r3, [r3, #32]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <TIM_SelectOCxM+0x4c>
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d114      	bne.n	8001e0a <TIM_SelectOCxM+0x76>
  {
    tmp += (TIM_Channel>>1);
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	085b      	lsrs	r3, r3, #1
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8001df8:	400b      	ands	r3, r1
 8001dfa:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6811      	ldr	r1, [r2, #0]
 8001e02:	883a      	ldrh	r2, [r7, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e017      	b.n	8001e3a <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	3b04      	subs	r3, #4
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8001e26:	400b      	ands	r3, r1
 8001e28:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	8839      	ldrh	r1, [r7, #0]
 8001e32:	0209      	lsls	r1, r1, #8
 8001e34:	b289      	uxth	r1, r1
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]
  }
}
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop

08001e60 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop

08001e7c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop

08001e98 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop

08001eb4 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	8b1b      	ldrh	r3, [r3, #24]
 8001ec8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed0:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8001ed2:	89fa      	ldrh	r2, [r7, #14]
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	89fa      	ldrh	r2, [r7, #14]
 8001ede:	831a      	strh	r2, [r3, #24]
}
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	8b1b      	ldrh	r3, [r3, #24]
 8001f00:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f08:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	89fa      	ldrh	r2, [r7, #14]
 8001f1a:	831a      	strh	r2, [r3, #24]
}
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop

08001f28 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8b9b      	ldrh	r3, [r3, #28]
 8001f3c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f44:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8001f46:	89fa      	ldrh	r2, [r7, #14]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	89fa      	ldrh	r2, [r7, #14]
 8001f52:	839a      	strh	r2, [r3, #28]
}
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop

08001f60 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8b9b      	ldrh	r3, [r3, #28]
 8001f74:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8001f76:	89fb      	ldrh	r3, [r7, #14]
 8001f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f7c:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	89fa      	ldrh	r2, [r7, #14]
 8001f8e:	839a      	strh	r2, [r3, #28]
}
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8b1b      	ldrh	r3, [r3, #24]
 8001fb0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	f023 0308 	bic.w	r3, r3, #8
 8001fb8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001fba:	89fa      	ldrh	r2, [r7, #14]
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	89fa      	ldrh	r2, [r7, #14]
 8001fc6:	831a      	strh	r2, [r3, #24]
}
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	8b1b      	ldrh	r3, [r3, #24]
 8001fe8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	89fb      	ldrh	r3, [r7, #14]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	89fa      	ldrh	r2, [r7, #14]
 8002002:	831a      	strh	r2, [r3, #24]
}
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop

08002010 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8b9b      	ldrh	r3, [r3, #28]
 8002024:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002026:	89fb      	ldrh	r3, [r7, #14]
 8002028:	f023 0308 	bic.w	r3, r3, #8
 800202c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800202e:	89fa      	ldrh	r2, [r7, #14]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	4313      	orrs	r3, r2
 8002034:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	89fa      	ldrh	r2, [r7, #14]
 800203a:	839a      	strh	r2, [r3, #28]
}
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8b9b      	ldrh	r3, [r3, #28]
 800205c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002064:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	b29a      	uxth	r2, r3
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	4313      	orrs	r3, r2
 8002070:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	89fa      	ldrh	r2, [r7, #14]
 8002076:	839a      	strh	r2, [r3, #28]
}
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop

08002084 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8b1b      	ldrh	r3, [r3, #24]
 8002098:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80020a2:	89fa      	ldrh	r2, [r7, #14]
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	89fa      	ldrh	r2, [r7, #14]
 80020ae:	831a      	strh	r2, [r3, #24]
}
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8b1b      	ldrh	r3, [r3, #24]
 80020d0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020d8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	b29a      	uxth	r2, r3
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	89fa      	ldrh	r2, [r7, #14]
 80020ea:	831a      	strh	r2, [r3, #24]
}
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8b9b      	ldrh	r3, [r3, #28]
 800210c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002116:	89fa      	ldrh	r2, [r7, #14]
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	4313      	orrs	r3, r2
 800211c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	89fa      	ldrh	r2, [r7, #14]
 8002122:	839a      	strh	r2, [r3, #28]
}
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8b9b      	ldrh	r3, [r3, #28]
 8002144:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002146:	89fb      	ldrh	r3, [r7, #14]
 8002148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800214c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b29a      	uxth	r2, r3
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	4313      	orrs	r3, r2
 8002158:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	839a      	strh	r2, [r3, #28]
}
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8b1b      	ldrh	r3, [r3, #24]
 8002180:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002182:	89fb      	ldrh	r3, [r7, #14]
 8002184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002188:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800218a:	89fa      	ldrh	r2, [r7, #14]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	4313      	orrs	r3, r2
 8002190:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	89fa      	ldrh	r2, [r7, #14]
 8002196:	831a      	strh	r2, [r3, #24]
}
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8b1b      	ldrh	r3, [r3, #24]
 80021b8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021c0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	89fb      	ldrh	r3, [r7, #14]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	89fa      	ldrh	r2, [r7, #14]
 80021d2:	831a      	strh	r2, [r3, #24]
}
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8b9b      	ldrh	r3, [r3, #28]
 80021f4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021fc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80021fe:	89fa      	ldrh	r2, [r7, #14]
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	4313      	orrs	r3, r2
 8002204:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	89fa      	ldrh	r2, [r7, #14]
 800220a:	839a      	strh	r2, [r3, #28]
}
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8b9b      	ldrh	r3, [r3, #28]
 800222c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002234:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b29a      	uxth	r2, r3
 800223c:	89fb      	ldrh	r3, [r7, #14]
 800223e:	4313      	orrs	r3, r2
 8002240:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	89fa      	ldrh	r2, [r7, #14]
 8002246:	839a      	strh	r2, [r3, #28]
}
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8c1b      	ldrh	r3, [r3, #32]
 8002268:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800226a:	89fb      	ldrh	r3, [r7, #14]
 800226c:	f023 0302 	bic.w	r3, r3, #2
 8002270:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8002272:	89fa      	ldrh	r2, [r7, #14]
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4313      	orrs	r3, r2
 8002278:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	89fa      	ldrh	r2, [r7, #14]
 800227e:	841a      	strh	r2, [r3, #32]
}
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8c1b      	ldrh	r3, [r3, #32]
 80022a0:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	f023 0308 	bic.w	r3, r3, #8
 80022a8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 80022aa:	89fa      	ldrh	r2, [r7, #14]
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	89fa      	ldrh	r2, [r7, #14]
 80022b6:	841a      	strh	r2, [r3, #32]
}
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop

080022c4 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8c1b      	ldrh	r3, [r3, #32]
 80022d8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 80022da:	89fb      	ldrh	r3, [r7, #14]
 80022dc:	f023 0320 	bic.w	r3, r3, #32
 80022e0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	89fb      	ldrh	r3, [r7, #14]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	89fa      	ldrh	r2, [r7, #14]
 80022f2:	841a      	strh	r2, [r3, #32]
}
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	8c1b      	ldrh	r3, [r3, #32]
 8002314:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002316:	89fb      	ldrh	r3, [r7, #14]
 8002318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800231c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	b29a      	uxth	r2, r3
 8002324:	89fb      	ldrh	r3, [r7, #14]
 8002326:	4313      	orrs	r3, r2
 8002328:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	89fa      	ldrh	r2, [r7, #14]
 800232e:	841a      	strh	r2, [r3, #32]
}
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8c1b      	ldrh	r3, [r3, #32]
 8002350:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002352:	89fb      	ldrh	r3, [r7, #14]
 8002354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002358:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	b29a      	uxth	r2, r3
 8002360:	89fb      	ldrh	r3, [r7, #14]
 8002362:	4313      	orrs	r3, r2
 8002364:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	89fa      	ldrh	r2, [r7, #14]
 800236a:	841a      	strh	r2, [r3, #32]
}
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop

08002378 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8c1b      	ldrh	r3, [r3, #32]
 800238c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800238e:	89fb      	ldrh	r3, [r7, #14]
 8002390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002394:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	b29a      	uxth	r2, r3
 800239c:	89fb      	ldrh	r3, [r7, #14]
 800239e:	4313      	orrs	r3, r2
 80023a0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	89fa      	ldrh	r2, [r7, #14]
 80023a6:	841a      	strh	r2, [r3, #32]
}
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop

080023b4 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8c1b      	ldrh	r3, [r3, #32]
 80023c8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80023ca:	89fb      	ldrh	r3, [r7, #14]
 80023cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023d0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	031b      	lsls	r3, r3, #12
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	89fb      	ldrh	r3, [r7, #14]
 80023da:	4313      	orrs	r3, r2
 80023dc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	89fa      	ldrh	r2, [r7, #14]
 80023e2:	841a      	strh	r2, [r3, #32]
}
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop

080023f0 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	2201      	movs	r2, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8c1b      	ldrh	r3, [r3, #32]
 8002412:	b29a      	uxth	r2, r3
 8002414:	89fb      	ldrh	r3, [r7, #14]
 8002416:	43db      	mvns	r3, r3
 8002418:	b29b      	uxth	r3, r3
 800241a:	4013      	ands	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8c1b      	ldrh	r3, [r3, #32]
 8002426:	b29a      	uxth	r2, r3
 8002428:	8839      	ldrh	r1, [r7, #0]
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	4313      	orrs	r3, r2
 8002434:	b29a      	uxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	841a      	strh	r2, [r3, #32]
}
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	2204      	movs	r2, #4
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	8c1b      	ldrh	r3, [r3, #32]
 8002466:	b29a      	uxth	r2, r3
 8002468:	89fb      	ldrh	r3, [r7, #14]
 800246a:	43db      	mvns	r3, r3
 800246c:	b29b      	uxth	r3, r3
 800246e:	4013      	ands	r3, r2
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8c1b      	ldrh	r3, [r3, #32]
 800247a:	b29a      	uxth	r2, r3
 800247c:	8839      	ldrh	r1, [r7, #0]
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	b29b      	uxth	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b29a      	uxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	841a      	strh	r2, [r3, #32]
}
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	8859      	ldrh	r1, [r3, #2]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	889a      	ldrh	r2, [r3, #4]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	891b      	ldrh	r3, [r3, #8]
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fcb0 	bl	8002e1c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	88db      	ldrh	r3, [r3, #6]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4619      	mov	r1, r3
 80024c4:	f000 f8e0 	bl	8002688 <TIM_SetIC1Prescaler>
 80024c8:	e036      	b.n	8002538 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d10f      	bne.n	80024f2 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	8859      	ldrh	r1, [r3, #2]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	889a      	ldrh	r2, [r3, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	891b      	ldrh	r3, [r3, #8]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fcde 	bl	8002ea0 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	88db      	ldrh	r3, [r3, #6]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4619      	mov	r1, r3
 80024ec:	f000 f8e8 	bl	80026c0 <TIM_SetIC2Prescaler>
 80024f0:	e022      	b.n	8002538 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d10f      	bne.n	800251a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	8859      	ldrh	r1, [r3, #2]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	889a      	ldrh	r2, [r3, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	891b      	ldrh	r3, [r3, #8]
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fd16 	bl	8002f38 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	88db      	ldrh	r3, [r3, #6]
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4619      	mov	r1, r3
 8002514:	f000 f8f2 	bl	80026fc <TIM_SetIC3Prescaler>
 8002518:	e00e      	b.n	8002538 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	8859      	ldrh	r1, [r3, #2]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	889a      	ldrh	r2, [r3, #4]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	891b      	ldrh	r3, [r3, #8]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fd4e 	bl	8002fc8 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	88db      	ldrh	r3, [r3, #6]
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4619      	mov	r1, r3
 8002534:	f000 f8fe 	bl	8002734 <TIM_SetIC4Prescaler>
  }
}
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop

08002540 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	811a      	strh	r2, [r3, #8]
}
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800257a:	2300      	movs	r3, #0
 800257c:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800257e:	2301      	movs	r3, #1
 8002580:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	885b      	ldrh	r3, [r3, #2]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800258a:	2302      	movs	r3, #2
 800258c:	81fb      	strh	r3, [r7, #14]
 800258e:	e001      	b.n	8002594 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8002590:	2300      	movs	r3, #0
 8002592:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	889b      	ldrh	r3, [r3, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800259c:	2302      	movs	r3, #2
 800259e:	81bb      	strh	r3, [r7, #12]
 80025a0:	e001      	b.n	80025a6 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80025a2:	2301      	movs	r3, #1
 80025a4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11c      	bne.n	80025e8 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	8859      	ldrh	r1, [r3, #2]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	889a      	ldrh	r2, [r3, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	891b      	ldrh	r3, [r3, #8]
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fc2e 	bl	8002e1c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	88db      	ldrh	r3, [r3, #6]
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4619      	mov	r1, r3
 80025c8:	f000 f85e 	bl	8002688 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	891b      	ldrh	r3, [r3, #8]
 80025d0:	89f9      	ldrh	r1, [r7, #14]
 80025d2:	89ba      	ldrh	r2, [r7, #12]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fc63 	bl	8002ea0 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	88db      	ldrh	r3, [r3, #6]
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f000 f86d 	bl	80026c0 <TIM_SetIC2Prescaler>
 80025e6:	e01b      	b.n	8002620 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	8859      	ldrh	r1, [r3, #2]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	889a      	ldrh	r2, [r3, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	891b      	ldrh	r3, [r3, #8]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fc53 	bl	8002ea0 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	88db      	ldrh	r3, [r3, #6]
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	4619      	mov	r1, r3
 8002602:	f000 f85d 	bl	80026c0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	891b      	ldrh	r3, [r3, #8]
 800260a:	89f9      	ldrh	r1, [r7, #14]
 800260c:	89ba      	ldrh	r2, [r7, #12]
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fc04 	bl	8002e1c <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	88db      	ldrh	r3, [r3, #6]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4619      	mov	r1, r3
 800261c:	f000 f834 	bl	8002688 <TIM_SetIC1Prescaler>
  }
}
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop

08002628 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8b1b      	ldrh	r3, [r3, #24]
 8002698:	b29b      	uxth	r3, r3
 800269a:	f023 030c 	bic.w	r3, r3, #12
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8b1b      	ldrh	r3, [r3, #24]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	831a      	strh	r2, [r3, #24]
}
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8b1b      	ldrh	r3, [r3, #24]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8b1b      	ldrh	r3, [r3, #24]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	831a      	strh	r2, [r3, #24]
}
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8b9b      	ldrh	r3, [r3, #28]
 800270c:	b29b      	uxth	r3, r3
 800270e:	f023 030c 	bic.w	r3, r3, #12
 8002712:	b29a      	uxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8b9b      	ldrh	r3, [r3, #28]
 800271c:	b29a      	uxth	r2, r3
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	4313      	orrs	r3, r2
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	839a      	strh	r2, [r3, #28]
}
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8b9b      	ldrh	r3, [r3, #28]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800274a:	b29a      	uxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8b9b      	ldrh	r3, [r3, #28]
 8002754:	b29a      	uxth	r2, r3
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	b29b      	uxth	r3, r3
 800275c:	4313      	orrs	r3, r2
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	839a      	strh	r2, [r3, #28]
}
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	885b      	ldrh	r3, [r3, #2]
 8002782:	4313      	orrs	r3, r2
 8002784:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800278a:	4313      	orrs	r3, r2
 800278c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002792:	4313      	orrs	r3, r2
 8002794:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800279a:	4313      	orrs	r3, r2
 800279c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	819a      	strh	r2, [r3, #12]
}
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002814:	b29b      	uxth	r3, r3
 8002816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002826:	e009      	b.n	800283c <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800282e:	b29b      	uxth	r3, r3
 8002830:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002834:	b29a      	uxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop

08002848 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	889b      	ldrh	r3, [r3, #4]
 800285e:	b29b      	uxth	r3, r3
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	b29a      	uxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	809a      	strh	r2, [r3, #4]
 800286a:	e007      	b.n	800287c <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	889b      	ldrh	r3, [r3, #4]
 8002870:	b29b      	uxth	r3, r3
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	809a      	strh	r2, [r3, #4]
  }
}
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	809a      	strh	r2, [r3, #4]
 80028aa:	e007      	b.n	80028bc <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	809a      	strh	r2, [r3, #4]
  }
}
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	899b      	ldrh	r3, [r3, #12]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	819a      	strh	r2, [r3, #12]
 80028ee:	e009      	b.n	8002904 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	899b      	ldrh	r3, [r3, #12]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4013      	ands	r3, r2
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	819a      	strh	r2, [r3, #12]
  }
}
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	829a      	strh	r2, [r3, #20]
}
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8a1b      	ldrh	r3, [r3, #16]
 8002940:	b29a      	uxth	r2, r3
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	e001      	b.n	8002956 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	43db      	mvns	r3, r3
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	821a      	strh	r2, [r3, #16]
}
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002994:	2300      	movs	r3, #0
 8002996:	81bb      	strh	r3, [r7, #12]
 8002998:	2300      	movs	r3, #0
 800299a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8a1b      	ldrh	r3, [r3, #16]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	4013      	ands	r3, r2
 80029a6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	899b      	ldrh	r3, [r3, #12]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	4013      	ands	r3, r2
 80029b2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80029b4:	89bb      	ldrh	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <TIM_GetITStatus+0x42>
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e001      	b.n	80029ca <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80029e4:	887b      	ldrh	r3, [r7, #2]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	821a      	strh	r2, [r3, #16]
}
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
 8002a04:	4613      	mov	r3, r2
 8002a06:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002a08:	887a      	ldrh	r2, [r7, #2]
 8002a0a:	883b      	ldrh	r3, [r7, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a30:	787b      	ldrb	r3, [r7, #1]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	899b      	ldrh	r3, [r3, #12]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	819a      	strh	r2, [r3, #12]
 8002a46:	e009      	b.n	8002a5c <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	899b      	ldrh	r3, [r3, #12]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	819a      	strh	r2, [r3, #12]
  }
}
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop

08002a68 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	889b      	ldrh	r3, [r3, #4]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	809a      	strh	r2, [r3, #4]
 8002a8a:	e007      	b.n	8002a9c <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	889b      	ldrh	r3, [r3, #4]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f023 0308 	bic.w	r3, r3, #8
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	809a      	strh	r2, [r3, #4]
  }
}
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop

08002aa8 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	891b      	ldrh	r3, [r3, #8]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f023 0307 	bic.w	r3, r3, #7
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	811a      	strh	r2, [r3, #8]
}
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f000 f887 	bl	8002bf0 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	891b      	ldrh	r3, [r3, #8]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	811a      	strh	r2, [r3, #8]
}
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	2b60      	cmp	r3, #96	; 0x60
 8002b16:	d107      	bne.n	8002b28 <TIM_TIxExternalClockConfig+0x30>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002b18:	893a      	ldrh	r2, [r7, #8]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	2201      	movs	r2, #1
 8002b22:	f000 f9bd 	bl	8002ea0 <TI2_Config>
 8002b26:	e006      	b.n	8002b36 <TIM_TIxExternalClockConfig+0x3e>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002b28:	893a      	ldrh	r2, [r7, #8]
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	2201      	movs	r2, #1
 8002b32:	f000 f973 	bl	8002e1c <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f000 f858 	bl	8002bf0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	891b      	ldrh	r3, [r3, #8]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f043 0307 	orr.w	r3, r3, #7
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	811a      	strh	r2, [r3, #8]
}
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop

08002b58 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	817b      	strh	r3, [r7, #10]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	813b      	strh	r3, [r7, #8]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f8a7 	bl	8002cd0 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	891b      	ldrh	r3, [r3, #8]
 8002b86:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002b88:	8afb      	ldrh	r3, [r7, #22]
 8002b8a:	f023 0307 	bic.w	r3, r3, #7
 8002b8e:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8002b90:	8afb      	ldrh	r3, [r7, #22]
 8002b92:	f043 0307 	orr.w	r3, r3, #7
 8002b96:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002b98:	8afb      	ldrh	r3, [r7, #22]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8002ba0:	8afb      	ldrh	r3, [r7, #22]
 8002ba2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ba6:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8afa      	ldrh	r2, [r7, #22]
 8002bac:	811a      	strh	r2, [r3, #8]
}
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002bce:	8979      	ldrh	r1, [r7, #10]
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f87b 	bl	8002cd0 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	891b      	ldrh	r3, [r3, #8]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	811a      	strh	r2, [r3, #8]
}
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	891b      	ldrh	r3, [r3, #8]
 8002c04:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002c06:	89fb      	ldrh	r3, [r7, #14]
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002c0e:	89fa      	ldrh	r2, [r7, #14]
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	89fa      	ldrh	r2, [r7, #14]
 8002c1a:	811a      	strh	r2, [r3, #8]
}
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop

08002c28 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	889b      	ldrh	r3, [r3, #4]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	889b      	ldrh	r3, [r3, #4]
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	809a      	strh	r2, [r3, #4]
}
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	891b      	ldrh	r3, [r3, #8]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f023 0307 	bic.w	r3, r3, #7
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	891b      	ldrh	r3, [r3, #8]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	811a      	strh	r2, [r3, #8]
}
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop

08002c98 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	891b      	ldrh	r3, [r3, #8]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	891b      	ldrh	r3, [r3, #8]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	887b      	ldrh	r3, [r7, #2]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	811a      	strh	r2, [r3, #8]
}
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop

08002cd0 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	817b      	strh	r3, [r7, #10]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	813b      	strh	r3, [r7, #8]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	891b      	ldrh	r3, [r3, #8]
 8002cf2:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	897b      	ldrh	r3, [r7, #10]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	8afb      	ldrh	r3, [r7, #22]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8afa      	ldrh	r2, [r7, #22]
 8002d16:	811a      	strh	r2, [r3, #8]
}
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop

08002d24 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	460b      	mov	r3, r1
 8002d38:	813b      	strh	r3, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	891b      	ldrh	r3, [r3, #8]
 8002d4e:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8b1b      	ldrh	r3, [r3, #24]
 8002d54:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8c1b      	ldrh	r3, [r3, #32]
 8002d5a:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002d5c:	8afb      	ldrh	r3, [r7, #22]
 8002d5e:	f023 0307 	bic.w	r3, r3, #7
 8002d62:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8002d64:	8afa      	ldrh	r2, [r7, #22]
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002d6c:	8abb      	ldrh	r3, [r7, #20]
 8002d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002d78:	8abb      	ldrh	r3, [r7, #20]
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002d84:	8a7b      	ldrh	r3, [r7, #18]
 8002d86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d8a:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	893b      	ldrh	r3, [r7, #8]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	8a7b      	ldrh	r3, [r7, #18]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8afa      	ldrh	r2, [r7, #22]
 8002da2:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8aba      	ldrh	r2, [r7, #20]
 8002da8:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8a7a      	ldrh	r2, [r7, #18]
 8002dae:	841a      	strh	r2, [r3, #32]
}
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop

08002dbc <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	889b      	ldrh	r3, [r3, #4]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	809a      	strh	r2, [r3, #4]
 8002dde:	e007      	b.n	8002df0 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	889b      	ldrh	r3, [r3, #4]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	809a      	strh	r2, [r3, #4]
  }
}
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop

08002dfc <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop

08002e1c <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	813b      	strh	r3, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	82fb      	strh	r3, [r7, #22]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8c1b      	ldrh	r3, [r3, #32]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8b1b      	ldrh	r3, [r3, #24]
 8002e52:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8c1b      	ldrh	r3, [r3, #32]
 8002e58:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002e5a:	8afb      	ldrh	r3, [r7, #22]
 8002e5c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8002e60:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	8afb      	ldrh	r3, [r7, #22]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e74:	8abb      	ldrh	r3, [r7, #20]
 8002e76:	f023 030a 	bic.w	r3, r3, #10
 8002e7a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e7c:	897a      	ldrh	r2, [r7, #10]
 8002e7e:	8abb      	ldrh	r3, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8afa      	ldrh	r2, [r7, #22]
 8002e8e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8aba      	ldrh	r2, [r7, #20]
 8002e94:	841a      	strh	r2, [r3, #32]
}
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	817b      	strh	r3, [r7, #10]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	813b      	strh	r3, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	82fb      	strh	r3, [r7, #22]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	82bb      	strh	r3, [r7, #20]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8c1b      	ldrh	r3, [r3, #32]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f023 0310 	bic.w	r3, r3, #16
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8b1b      	ldrh	r3, [r3, #24]
 8002eda:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8c1b      	ldrh	r3, [r3, #32]
 8002ee0:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002ee8:	8afb      	ldrh	r3, [r7, #22]
 8002eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eee:	051b      	lsls	r3, r3, #20
 8002ef0:	0d1b      	lsrs	r3, r3, #20
 8002ef2:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	031b      	lsls	r3, r3, #12
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	8afb      	ldrh	r3, [r7, #22]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	8afb      	ldrh	r3, [r7, #22]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f0c:	8abb      	ldrh	r3, [r7, #20]
 8002f0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f12:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002f14:	8a7a      	ldrh	r2, [r7, #18]
 8002f16:	8abb      	ldrh	r3, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f043 0310 	orr.w	r3, r3, #16
 8002f20:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8afa      	ldrh	r2, [r7, #22]
 8002f26:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8aba      	ldrh	r2, [r7, #20]
 8002f2c:	841a      	strh	r2, [r3, #32]
}
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	4608      	mov	r0, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	461a      	mov	r2, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	817b      	strh	r3, [r7, #10]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	813b      	strh	r3, [r7, #8]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	82fb      	strh	r3, [r7, #22]
 8002f56:	2300      	movs	r3, #0
 8002f58:	82bb      	strh	r3, [r7, #20]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8c1b      	ldrh	r3, [r3, #32]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8b9b      	ldrh	r3, [r3, #28]
 8002f72:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8c1b      	ldrh	r3, [r3, #32]
 8002f78:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002f7a:	897b      	ldrh	r3, [r7, #10]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002f80:	8afb      	ldrh	r3, [r7, #22]
 8002f82:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8002f86:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	893b      	ldrh	r3, [r7, #8]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	8afb      	ldrh	r3, [r7, #22]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f9a:	8abb      	ldrh	r3, [r7, #20]
 8002f9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002fa0:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002fa2:	8a7a      	ldrh	r2, [r7, #18]
 8002fa4:	8abb      	ldrh	r3, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fae:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8afa      	ldrh	r2, [r7, #22]
 8002fb4:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8aba      	ldrh	r2, [r7, #20]
 8002fba:	841a      	strh	r2, [r3, #32]
}
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	817b      	strh	r3, [r7, #10]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	813b      	strh	r3, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	82fb      	strh	r3, [r7, #22]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	82bb      	strh	r3, [r7, #20]
 8002fea:	2300      	movs	r3, #0
 8002fec:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8c1b      	ldrh	r3, [r3, #32]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8b9b      	ldrh	r3, [r3, #28]
 8003002:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8c1b      	ldrh	r3, [r3, #32]
 8003008:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	031b      	lsls	r3, r3, #12
 800300e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003010:	8afb      	ldrh	r3, [r7, #22]
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	051b      	lsls	r3, r3, #20
 8003018:	0d1b      	lsrs	r3, r3, #20
 800301a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800301c:	893b      	ldrh	r3, [r7, #8]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	b29a      	uxth	r2, r3
 8003022:	8afb      	ldrh	r3, [r7, #22]
 8003024:	4313      	orrs	r3, r2
 8003026:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	031b      	lsls	r3, r3, #12
 800302c:	b29a      	uxth	r2, r3
 800302e:	8afb      	ldrh	r3, [r7, #22]
 8003030:	4313      	orrs	r3, r2
 8003032:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003034:	8abb      	ldrh	r3, [r7, #20]
 8003036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800303a:	045b      	lsls	r3, r3, #17
 800303c:	0c5b      	lsrs	r3, r3, #17
 800303e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003040:	8a7a      	ldrh	r2, [r7, #18]
 8003042:	8abb      	ldrh	r3, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800304c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8afa      	ldrh	r2, [r7, #22]
 8003052:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8aba      	ldrh	r2, [r7, #20]
 8003058:	841a      	strh	r2, [r3, #32]
}
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	080030ce 	.word	0x080030ce
 8003068:	20000188 	.word	0x20000188
 800306c:	200001ac 	.word	0x200001ac
 8003070:	200001ac 	.word	0x200001ac
 8003074:	200001b0 	.word	0x200001b0

08003078 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function

Reset_Handler:  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800307a:	e003      	b.n	8003084 <LoopCopyDataInit>

0800307c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <LoopFillZerobss+0x1c>)
  ldr  r3, [r3, r1]
 800307e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003082:	3104      	adds	r1, #4

08003084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003084:	480c      	ldr	r0, [pc, #48]	; (80030b8 <LoopFillZerobss+0x20>)
  ldr  r3, =_edata
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <LoopFillZerobss+0x24>)
  adds  r2, r0, r1
 8003088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800308a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800308c:	d3f6      	bcc.n	800307c <CopyDataInit>
  ldr  r2, =_sbss
 800308e:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <LoopFillZerobss+0x28>)
  b  LoopFillZerobss
 8003090:	e002      	b.n	8003098 <LoopFillZerobss>

08003092 <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003094:	f842 3b04 	str.w	r3, [r2], #4

08003098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <LoopFillZerobss+0x2c>)
  cmp  r2, r3
 800309a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800309c:	d3f9      	bcc.n	8003092 <FillZerobss>

/* FPU settings */
/* Enable CP10,CP11: Privileged and User mode access to coprocessor */
 ldr     r0, =0xE000ED88           
 800309e:	480a      	ldr	r0, [pc, #40]	; (80030c8 <LoopFillZerobss+0x30>)
 ldr     r1,[r0]
 80030a0:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 80030a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 80030a6:	6001      	str	r1, [r0, #0]

/* TODO: Add stack painting here */

/* Call the clock system intitialization function.*/
  bl  low_level_init   
 80030a8:	f7fd fab4 	bl	8000614 <low_level_init>

/* Call the applications entry point.*/
  bl  main  /* Enter the C/C++ code */
 80030ac:	f7fe f99a 	bl	80013e4 <main>
  bx  lr    
 80030b0:	4770      	bx	lr
  swi 0x0  /* cause exception if main() ever returns */
 80030b2:	df00      	svc	0
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80030b4:	080030ce 	.word	0x080030ce
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030b8:	20000188 	.word	0x20000188
  ldr  r3, =_edata
 80030bc:	200001ac 	.word	0x200001ac
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80030c0:	200001ac 	.word	0x200001ac
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030c4:	200001b0 	.word	0x200001b0
  cmp  r2, r3
  bcc  FillZerobss

/* FPU settings */
/* Enable CP10,CP11: Privileged and User mode access to coprocessor */
 ldr     r0, =0xE000ED88           
 80030c8:	e000ed88 	.word	0xe000ed88

080030cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030cc:	e7fe      	b.n	80030cc <ADC_IRQHandler>
